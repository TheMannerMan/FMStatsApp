@page "/role-selecter"
@model RoleSelecterModel
@{
    ViewData["Title"] = "Role Selecter";
}

<div class="mx-auto max-w-7xl px-4 py-10">
    <div class="flex items-center justify-between mb-8">
        <div>
            <h1 class="text-3xl font-semibold tracking-tight text-slate-100">Role Selecter</h1>
            <p class="text-slate-400 mt-2">Formation: @Model.SelectedFormationName</p>
        </div>
        <div class="flex gap-3">
            <form method="post" asp-page-handler="Optimize" style="display: inline;">
                <input type="hidden" asp-for="SelectedFormationName" />
                @Html.AntiForgeryToken()
                <button type="submit" class="inline-flex items-center rounded-md bg-emerald-500 px-5 py-2 text-sm font-medium text-white shadow hover:bg-emerald-400 focus:outline-none focus:ring-2 focus:ring-emerald-300">
                    Optimize Formation
                </button>
            </form>
            <form method="post" asp-page-handler="ResetFormation" style="display: inline;">
                <input type="hidden" asp-for="SelectedFormationName" />
                @Html.AntiForgeryToken()
                <button type="submit" class="inline-flex items-center rounded-md bg-rose-500 px-5 py-2 text-sm font-medium text-white shadow hover:bg-rose-400 focus:outline-none focus:ring-2 focus:ring-rose-300" 
                        onclick="return confirm('Är du säker på att du vill nollställa startelvan? Alla val och låsningar kommer att tas bort.')">
                    Reset Formation
                </button>
            </form>
            <a asp-page="/BestStartingXI" class="inline-flex items-center rounded-md bg-slate-600 px-5 py-2 text-sm font-medium text-white shadow hover:bg-slate-500 focus:outline-none focus:ring-2 focus:ring-slate-400">
                Back to Formations
            </a>
        </div>
    </div>

    @if (TempData["OptimizationResult"] != null)
    {
        <div class="mb-6 rounded-xl border border-emerald-500/30 bg-emerald-500/10 p-4 text-emerald-200">
            @TempData["OptimizationResult"]
        </div>
    }

    @if (TempData["ResetResult"] != null)
    {
        <div class="mb-6 rounded-xl border border-blue-500/30 bg-blue-500/10 p-4 text-blue-200">
            @TempData["ResetResult"]
        </div>
    }

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="mb-6 rounded-xl border border-rose-500/30 bg-rose-500/10 p-4 text-rose-200">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <div>@error.ErrorMessage</div>
            }
        </div>
    }

    <!-- Formation Grid -->
    <div class="rounded-2xl border border-white/10 bg-white/5 backdrop-blur p-8 shadow">
        <div class="formation-grid" style="display: grid; grid-template-columns: repeat(5, 1fr); grid-template-rows: repeat(5, 1fr); gap: 20px; min-height: 600px;">
            @for (int i = 0; i < Model.FormationPositions.Count; i++)
            {
                var position = Model.FormationPositions[i];
                <div class="position-slot" 
                     style="grid-row: @position.GridRow; grid-column: @position.GridColumn;"
                     data-position-index="@position.Index"
                     data-position="@position.Position.ToString()"
                     onclick="openPositionModal(@position.Index)">
                    
                    <div class="position-card bg-slate-800/60 border border-white/20 rounded-lg p-4 cursor-pointer hover:bg-slate-700/60 transition-colors min-h-[120px] flex flex-col">
                        <!-- Position Header -->
                        <div class="flex items-center justify-between mb-2">
                            <span class="text-xs font-semibold text-slate-400 uppercase">@position.Position.ToString()</span>
                            <div class="flex gap-1">
                                @if (position.IsRoleLocked)
                                {
                                    <span class="text-amber-400 text-xs" title="Role Locked">🔒</span>
                                }
                                @if (position.IsPlayerLocked)
                                {
                                    <span class="text-blue-400 text-xs" title="Player Locked">👤</span>
                                }
                            </div>
                        </div>

                        <!-- Selected Role -->
                        <div class="mb-2">
                            @if (!string.IsNullOrEmpty(position.SelectedRole))
                            {
                                <span class="inline-flex items-center rounded bg-primary-500/20 px-2 py-0.5 text-xs font-medium text-primary-300">
                                    @position.SelectedRole
                                </span>
                            }
                            else
                            {
                                <span class="text-xs text-slate-500">No role selected</span>
                            }
                        </div>

                        <!-- Selected Player -->
                        <div class="flex-grow flex flex-col justify-end">
                            @if (position.SelectedPlayer != null)
                            {
                                <div class="text-sm font-medium text-slate-200">@position.SelectedPlayer.Name</div>
                                <div class="text-xs text-slate-400">Age: @position.SelectedPlayer.Age</div>
                                @if (!string.IsNullOrEmpty(position.SelectedRole))
                                {
                                    var rating = Model.CalculatePlayerRoleRating(position.SelectedPlayer, position.SelectedRole);
                                    var colorClass = rating >= 15 ? "text-emerald-400" : rating >= 12 ? "text-amber-400" : "text-rose-400";
                                    <div class="text-xs @colorClass">Rating: @rating.ToString("F1")</div>
                                }
                            }
                            else
                            {
                                <div class="text-sm text-slate-500">No player selected</div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Position Selection Modal -->
<div id="positionModal" class="fixed inset-0 z-50 hidden overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-900 bg-opacity-75 transition-opacity" onclick="closePositionModal()"></div>

        <div class="inline-block align-bottom bg-slate-800 rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full sm:p-6">
            <div class="sm:flex sm:items-start">
                <div class="w-full">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-lg leading-6 font-medium text-slate-100" id="modal-title">
                            Configure Position
                        </h3>
                        <button onclick="closePositionModal()" class="text-slate-400 hover:text-slate-200">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>

                    <div class="space-y-6">
                        <!-- Role Selection -->
                        <div>
                            <div class="flex items-center justify-between mb-2">
                                <label class="block text-sm font-medium text-slate-200">Role</label>
                                <button id="toggleRoleLock" onclick="toggleRoleLock()" class="text-xs px-2 py-1 rounded bg-slate-700 text-slate-300 hover:bg-slate-600">
                                    🔒 Toggle Lock
                                </button>
                            </div>
                            <select id="roleSelect" class="w-full rounded-md border border-white/10 bg-white/10 px-3 py-2 text-sm text-slate-100 focus:outline-none focus:ring-2 focus:ring-primary-400/50">
                                <option value="">Select a role...</option>
                            </select>
                        </div>

                        <!-- Player Selection -->
                        <div>
                            <div class="flex items-center justify-between mb-2">
                                <label class="block text-sm font-medium text-slate-200">Player</label>
                                <button id="togglePlayerLock" onclick="togglePlayerLock()" class="text-xs px-2 py-1 rounded bg-slate-700 text-slate-300 hover:bg-slate-600">
                                    👤 Toggle Lock
                                </button>
                            </div>
                            <select id="playerSelect" class="w-full rounded-md border border-white/10 bg-white/10 px-3 py-2 text-sm text-slate-100 focus:outline-none focus:ring-2 focus:ring-primary-400/50">
                                <option value="">Select a player...</option>
                            </select>
                        </div>

                        <!-- Player Rating Display -->
                        <div id="playerRating" class="hidden">
                            <label class="block text-sm font-medium text-slate-200 mb-2">Role Rating</label>
                            <div id="ratingDisplay" class="text-lg font-bold"></div>
                        </div>
                    </div>

                    <div class="mt-6 flex justify-end space-x-3">
                        <button onclick="closePositionModal()" class="inline-flex justify-center rounded-md border border-slate-600 bg-slate-700 px-4 py-2 text-sm font-medium text-slate-200 hover:bg-slate-600 focus:outline-none focus:ring-2 focus:ring-slate-500">
                            Cancel
                        </button>
                        <button onclick="savePosition()" class="inline-flex justify-center rounded-md border border-transparent bg-primary-600 px-4 py-2 text-sm font-medium text-white hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500">
                            Save
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentPositionIndex = -1;
        let positionData = null;
        const formationName = '@Model.SelectedFormationName';

        function getRequestVerificationToken() {
            // Try to get the token from forms first
            let token = document.querySelector('form input[name="__RequestVerificationToken"]')?.value;
            
            // If not found, try any input with that name
            if (!token) {
                token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            }
            
            // If still not found, create a temporary form to get a fresh token
            if (!token) {
                console.warn('RequestVerificationToken not found, creating temporary form');
                // This is a fallback - in a real app you might want to fetch a new token
                return '';
            }
            
            return token;
        }

        async function openPositionModal(positionIndex) {
            currentPositionIndex = positionIndex;
            
            try {
                // Load position data with proper parameters
                const url = `/role-selecter?handler=PositionData&positionIndex=${positionIndex}&formationName=${encodeURIComponent(formationName)}`;
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                positionData = data;
                
                // Update modal title
                document.getElementById('modal-title').textContent = `Configure ${data.position.Position} Position`;
                
                // Populate role select
                const roleSelect = document.getElementById('roleSelect');
                roleSelect.innerHTML = '<option value="">Select a role...</option>';
                data.roles.forEach(role => {
                    const option = document.createElement('option');
                    option.value = role.name;
                    option.textContent = `${role.name} (${role.shortName})`;
                    if (role.name === data.position.SelectedRole) {
                        option.selected = true;
                    }
                    roleSelect.appendChild(option);
                });
                
                // Populate player select
                const playerSelect = document.getElementById('playerSelect');
                playerSelect.innerHTML = '<option value="">Select a player...</option>';
                data.players.forEach(player => {
                    const option = document.createElement('option');
                    option.value = player.uid;
                    option.textContent = `${player.name} (${player.age}) - ${player.position}`;
                    if (player.uid === data.position.SelectedPlayerId) {
                        option.selected = true;
                    }
                    playerSelect.appendChild(option);
                });
                
                // Update lock button states
                updateLockButtons();
                
                // Add event listeners for real-time rating updates
                roleSelect.onchange = updateRating;
                playerSelect.onchange = updateRating;
                
                // Update rating if both role and player are selected
                updateRating();
                
                // Show modal
                document.getElementById('positionModal').classList.remove('hidden');
                
            } catch (error) {
                console.error('Error loading position data:', error);
                alert('Failed to load position data: ' + error.message);
            }
        }

        function closePositionModal() {
            document.getElementById('positionModal').classList.add('hidden');
            
            // Clean up event listeners and reset state
            const roleSelect = document.getElementById('roleSelect');
            const playerSelect = document.getElementById('playerSelect');
            
            if (roleSelect) {
                roleSelect.onchange = null;
                roleSelect.innerHTML = '<option value="">Select a role...</option>';
            }
            
            if (playerSelect) {
                playerSelect.onchange = null;
                playerSelect.innerHTML = '<option value="">Select a player...</option>';
            }
            
            // Reset rating display
            const ratingDiv = document.getElementById('playerRating');
            if (ratingDiv) {
                ratingDiv.classList.add('hidden');
            }
            
            // Reset global state
            currentPositionIndex = -1;
            positionData = null;
        }

        function updateLockButtons() {
            if (!positionData) return;
            
            const roleLockBtn = document.getElementById('toggleRoleLock');
            const playerLockBtn = document.getElementById('togglePlayerLock');
            
            roleLockBtn.textContent = positionData.position.IsRoleLocked ? '🔓 Unlock Role' : '🔒 Lock Role';
            roleLockBtn.className = positionData.position.IsRoleLocked 
                ? 'text-xs px-2 py-1 rounded bg-amber-600 text-white hover:bg-amber-500'
                : 'text-xs px-2 py-1 rounded bg-slate-700 text-slate-300 hover:bg-slate-600';
                
            playerLockBtn.textContent = positionData.position.IsPlayerLocked ? '🔓 Unlock Player' : '👤 Lock Player';
            playerLockBtn.className = positionData.position.IsPlayerLocked 
                ? 'text-xs px-2 py-1 rounded bg-blue-600 text-white hover:bg-blue-500'
                : 'text-xs px-2 py-1 rounded bg-slate-700 text-slate-300 hover:bg-slate-600';
        }

        async function updateRating() {
            const roleSelect = document.getElementById('roleSelect');
            const playerSelect = document.getElementById('playerSelect');
            const ratingDiv = document.getElementById('playerRating');
            const ratingDisplay = document.getElementById('ratingDisplay');
            
            const selectedRole = roleSelect.value;
            const selectedPlayerId = playerSelect.value;
            
            if (selectedRole && selectedPlayerId && positionData) {
                const player = positionData.players.find(p => p.uid.toString() === selectedPlayerId);
                if (player) {
                    try {
                        // Calculate actual rating using backend
                        const url = `/role-selecter?handler=CalculateRating&playerId=${selectedPlayerId}&roleName=${encodeURIComponent(selectedRole)}&formationName=${encodeURIComponent(formationName)}`;
                        const response = await fetch(url, {
                            method: 'GET',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });
                        
                        if (response.ok) {
                            const result = await response.json();
                            const rating = result.rating;
                            const colorClass = rating >= 15 ? 'text-emerald-400' : rating >= 12 ? 'text-amber-400' : 'text-rose-400';
                            
                            ratingDisplay.innerHTML = `<span class="${colorClass}">${rating.toFixed(1)}</span>`;
                            ratingDiv.classList.remove('hidden');
                        } else {
                            console.warn('Failed to fetch rating from server, using fallback');
                            ratingDiv.classList.add('hidden');
                        }
                    } catch (error) {
                        console.error('Error calculating rating:', error);
                        ratingDiv.classList.add('hidden');
                    }
                }
            } else {
                ratingDiv.classList.add('hidden');
            }
        }

        async function toggleRoleLock() {
            if (currentPositionIndex === -1) return;
            
            try {
                const response = await fetch('/role-selecter?handler=ToggleRoleLock', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getRequestVerificationToken()
                    },
                    body: JSON.stringify({
                        positionIndex: currentPositionIndex,
                        formationName: formationName
                    })
                });
                
                if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                
                const result = await response.json();
                if (result.success) {
                    positionData.position.IsRoleLocked = result.isLocked;
                    updateLockButtons();
                    // Update the main UI as well
                    updatePositionLockIcons(currentPositionIndex);
                } else {
                    alert(result.error || 'Failed to toggle role lock');
                }
            } catch (error) {
                console.error('Error toggling role lock:', error);
                alert('Failed to toggle role lock: ' + error.message);
            }
        }

        async function togglePlayerLock() {
            if (currentPositionIndex === -1) return;
            
            try {
                const response = await fetch('/role-selecter?handler=TogglePlayerLock', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getRequestVerificationToken()
                    },
                    body: JSON.stringify({
                        positionIndex: currentPositionIndex,
                        formationName: formationName
                    })
                });
                
                if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                
                const result = await response.json();
                if (result.success) {
                    positionData.position.IsPlayerLocked = result.isLocked;
                    updateLockButtons();
                    // Update the main UI as well
                    updatePositionLockIcons(currentPositionIndex);
                } else {
                    alert(result.error || 'Failed to toggle player lock');
                }
            } catch (error) {
                console.error('Error toggling player lock:', error);
                alert('Failed to toggle player lock: ' + error.message);
            }
        }

        async function savePosition() {
            if currentPositionIndex === -1) return;
            
            const roleSelect = document.getElementById('roleSelect');
            const playerSelect = document.getElementById('playerSelect');
            
            const selectedRole = roleSelect.value;
            const selectedPlayerId = playerSelect.value ? parseInt(playerSelect.value) : null;
            
            try {
                const response = await fetch('/role-selecter?handler=UpdatePosition', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getRequestVerificationToken()
                    },
                    body: JSON.stringify({
                        positionIndex: currentPositionIndex,
                        selectedRole: selectedRole,
                        selectedPlayerId: selectedPlayerId,
                        formationName: formationName
                    })
                });
                
                if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                
                const result = await response.json();
                if (result.success) {
                    // Update the position data in memory
                    if (positionData) {
                        positionData.position.SelectedRole = selectedRole;
                        positionData.position.SelectedPlayerId = selectedPlayerId;
                    }
                    
                    closePositionModal();
                    
                    // Update the UI dynamically instead of reloading
                    updatePositionCardUI(currentPositionIndex, selectedRole, selectedPlayerId);
                } else {
                    alert(result.error || 'Failed to save position');
                }
            } catch (error) {
                console.error('Error saving position:', error);
                alert('Failed to save position: ' + error.message);
            }
        }

        function updatePositionCardUI(positionIndex, selectedRole, selectedPlayerId) {
            // Find the position card
            const positionCard = document.querySelector(`[data-position-index="${positionIndex}"]`);
            if (!positionCard) return;

            // Update role display
            const roleDisplay = positionCard.querySelector('.position-card > div:nth-child(2)');
            if (roleDisplay) {
                if (selectedRole) {
                    roleDisplay.innerHTML = `<span class="inline-flex items-center rounded bg-primary-500/20 px-2 py-0.5 text-xs font-medium text-primary-300">${selectedRole}</span>`;
                } else {
                    roleDisplay.innerHTML = `<span class="text-xs text-slate-500">No role selected</span>`;
                }
            }

            // Update player display
            const playerDisplay = positionCard.querySelector('.position-card > div:nth-child(3)');
            if (playerDisplay && selectedPlayerId && positionData) {
                const player = positionData.players.find(p => p.uid === selectedPlayerId);
                if (player) {
                    let playerHtml = `
                        <div class="text-sm font-medium text-slate-200">${player.name}</div>
                        <div class="text-xs text-slate-400">Age: ${player.age}</div>
                    `;
                    
                    // Add rating if both role and player are selected
                    if (selectedRole) {
                        // For now, just show placeholder rating - we could fetch the actual rating here
                        const rating = Math.random() * 15 + 5; // Replace with actual calculation
                        const colorClass = rating >= 15 ? 'text-emerald-400' : rating >= 12 ? 'text-amber-400' : 'text-rose-400';
                        playerHtml += `<div class="text-xs ${colorClass}">Rating: ${rating.toFixed(1)}</div>`;
                    }
                    
                    playerDisplay.innerHTML = playerHtml;
                } else {
                    playerDisplay.innerHTML = `<div class="text-sm text-slate-500">No player selected</div>`;
                }
            } else if (playerDisplay) {
                playerDisplay.innerHTML = `<div class="text-sm text-slate-500">No player selected</div>`;
            }

            // Update lock icons in header
            updatePositionLockIcons(positionIndex);
        }

        function updatePositionLockIcons(positionIndex) {
            const positionCard = document.querySelector(`[data-position-index="${positionIndex}"]`);
            if (!positionCard || !positionData) return;

            const lockIconContainer = positionCard.querySelector('.position-card > div:first-child > div:last-child');
            if (lockIconContainer) {
                let iconsHtml = '';
                if (positionData.position.IsRoleLocked) {
                    iconsHtml += '<span class="text-amber-400 text-xs" title="Role Locked">🔒</span>';
                }
                if (positionData.position.IsPlayerLocked) {
                    iconsHtml += '<span class="text-blue-400 text-xs" title="Player Locked">👤</span>';
                }
                lockIconContainer.innerHTML = iconsHtml;
            }
        }
    </script>
}